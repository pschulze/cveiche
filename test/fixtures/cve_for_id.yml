---
http_interactions:
- request:
    method: get
    uri: https://cve.circl.lu/api/cve/CVE-2016-9337
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json
      User-Agent:
      - net/hippie 0.2.6
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 05 Aug 2019 17:04:34 GMT
      Server:
      - TornadoServer/4.4.2
      Strict-Transport-Security:
      - max-age=15768000
      Content-Length:
      - '15580'
      Content-Type:
      - application/json
      Access-Control-Allow-Origin:
      - https://cve.circl.lu
    body:
      encoding: UTF-8
      string: |-
        {
            "Modified": "2017-03-14T09:16:18.140000",
            "Published": "2017-02-13T16:59:01.610000",
            "access": {
                "authentication": "NONE",
                "complexity": "HIGH",
                "vector": "NETWORK"
            },
            "capec": [
                {
                    "id": "11",
                    "name": "Cause Web Server Misclassification",
                    "prerequisites": "Web server software must rely on file name or file extension for processing.",
                    "related_weakness": [
                        "69",
                        "77"
                    ],
                    "solutions": "Implementation: Server routines should be determined by content not determined by filename or file extension.",
                    "summary": "An attack of this type exploits a Web server's decision to take action based on filename or file extension. Because different file types are handled by different server processes, misclassification may force the Web server to take unexpected action, or expected actions in an unexpected sequence. This may cause the server to exhaust resources, supply debug or system data to the attacker, or bind an attacker to a remote process.\nThis type of vulnerability has been found in many widely used servers including IIS, Lotus Domino, and Orion. The attacker's job in this case is straightforward, standard communication protocols and methods are used and are generally appended with malicious information at the tail end of an otherwise legitimate request. The attack payload varies, but it could be special characters like a period or simply appending a tag that has a special meaning for operations on the server side like .jsp for a java application server. The essence of this attack is that the attacker deceives the server into executing functionality based on the name of the request, i.e. login.jsp, not the contents."
                },
                {
                    "id": "136",
                    "name": "LDAP Injection",
                    "prerequisites": "The target application must accept a string as user input, fail to sanitize characters that have a special meaning in LDAP queries in the user input, and insert the user-supplied string in an LDAP query which is then processed.",
                    "related_weakness": [
                        "77",
                        "90",
                        "20"
                    ],
                    "solutions": "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as LDAP content.\nUse of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the LDAP or application.",
                    "summary": "An attacker manipulates or crafts an LDAP query for the purpose of undermining the security of the target. Some applications use user input to create LDAP queries that are processed by an LDAP server. For example, a user might provide their username during authentication and the username might be inserted in an LDAP query during the authentication process. An attacker could use this input to inject additional commands into an LDAP query that could disclose sensitive information. For example, entering a * in the aforementioned query might return information about all users on the system. This attack is very similar to an SQL injection attack in that it manipulates a query to gather additional information or coerce a particular return value."
                },
                {
                    "id": "15",
                    "name": "Command Delimiters",
                    "prerequisites": "Software's input validation or filtering must not detect and block presence of additional malicious command.",
                    "related_weakness": [
                        "146",
                        "77",
                        "184",
                        "78",
                        "185",
                        "93",
                        "140",
                        "157",
                        "138",
                        "154",
                        "697",
                        "713"
                    ],
                    "solutions": "Design: Perform whitelist validation against a positive specification for command length, type, and parameters.\nDesign: Limit program privileges, so if commands circumvent program input validation or filter routines then commands do not running under a privileged account\nImplementation: Perform input validation for all remote content.\nImplementation: Use type conversions such as JDBC prepared statements.",
                    "summary": "An attack of this type exploits a programs' vulnerabilities that allows an attacker's commands to be concatenated onto a legitimate command with the intent of targeting other resources such as the file system or database. The system that uses a filter or a blacklist input validation, as opposed to whitelist validation is vulnerable to an attacker who predicts delimiters (or combinations of delimiters) not present in the filter or blacklist. As with other injection attacks, the attacker uses the command delimiter payload as an entry point to tunnel through the application and activate additional attacks through SQL queries, shell commands, network scanning, and so on."
                },
                {
                    "id": "23",
                    "name": "File System Function Injection, Content Based",
                    "prerequisites": "The target software must consume files.\nThe attacker must have access to modify files that the target software will consume.",
                    "related_weakness": [
                        "77",
                        "23",
                        "22",
                        "713",
                        "715"
                    ],
                    "solutions": "Design: Enforce principle of least privilege\nDesign: Validate all input for content including files. Ensure that if files and remote content must be accepted that once accepted, they are placed in a sandbox type location so that lower assurance clients cannot write up to higher assurance processes (like Web server processes for example)\nDesign: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.\nDesign: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.\nImplementation: Virus scanning on host\nImplementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.",
                    "summary": "An attack of this type exploits the host's trust in executing remote content including binary files. The files are poisoned with a malicious payload (targeting the file systems accessible by the target software) by the attacker and may be passed through standard channels such as via email, and standard web content like PDF and multimedia files. The attacker exploits known vulnerabilities or handling routines in the target processes. Vulnerabilities of this type have been found in a wide variety of commercial applications from Microsoft Office to Adobe Acrobat and Apple Safari web browser. When the attacker knows the standard handling routines and can identify vulnerabilities and entry points they can be exploited by otherwise seemingly normal content. Once the attack is executed, the attackers' program can access relative directories such as C:\\Program Files or other standard system directories to launch further attacks. In a worst case scenario, these programs are combined with other propagation logic and work as a virus."
                },
                {
                    "id": "43",
                    "name": "Exploiting Multiple Input Interpretation Layers",
                    "prerequisites": "User input is used to construct a command to be executed on the target system or as part of the file name.\nMultiple parser passes are performed on the data supplied by the user.",
                    "related_weakness": [
                        "171",
                        "179",
                        "181",
                        "184",
                        "183",
                        "77",
                        "78",
                        "74",
                        "20",
                        "697",
                        "707"
                    ],
                    "solutions": "An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it.\nMake sure to perform input validation on canonicalized data (i.e. data that is data in its most standard form). This will help avoid tricky encodings getting past the filters.\nAssume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.",
                    "summary": "An attacker supplies the target software with input data that contains sequences of special characters designed to bypass input validation logic. This exploit relies on the target making multiples passes over the input data and processing a \"layer\" of special characters with each pass. In this manner, the attacker can disguise input that would otherwise be rejected as invalid by concealing it with layers of special/escape characters that are stripped off by subsequent processing steps.\nThe goal is to first discover cases where the input validation layer executes before one or more parsing layers. That is, user input may go through the following logic in an application:\nIn such cases, the attacker will need to provide input that will pass through the input validator, but after passing through parser2, will be converted into something that the input validator was supposed to stop."
                },
                {
                    "id": "6",
                    "name": "Argument Injection",
                    "prerequisites": "Target software fails to strip all user-supplied input of any content that could cause the shell to perform unexpected actions.\nSoftware must allow for unvalidated or unfiltered input to be executed on operating system shell, and, optionally, the system configuration must allow for output to be sent back to client.",
                    "related_weakness": [
                        "77",
                        "146",
                        "184",
                        "78",
                        "185",
                        "713",
                        "697"
                    ],
                    "solutions": "Design: Do not program input values directly on command shell, instead treat user input as guilty until proven innocent. Build a function that takes user input and converts it to applications specific types and values, stripping or filtering out all unauthorized commands and characters in the process.\nDesign: Limit program privileges, so if metacharacters or other methods circumvent program input validation routines and shell access is attained then it is not running under a privileged account. chroot jails create a sandbox for the application to execute in, making it more difficult for an attacker to elevate privilege even in the case that a compromise has occurred.\nImplementation: Implement an audit log that is written to a separate host, in the event of a compromise the audit log may be able to provide evidence and details of the compromise.",
                    "summary": "An attacker changes the behavior or state of a targeted application through injecting data or command syntax through the targets use of non-validated and non-filtered arguments of exposed services or methods."
                },
                {
                    "id": "75",
                    "name": "Manipulating Writeable Configuration Files",
                    "prerequisites": "Configuration files must be modifiable by the attacker",
                    "related_weakness": [
                        "349",
                        "99",
                        "77",
                        "346",
                        "353",
                        "354",
                        "713"
                    ],
                    "solutions": "Design: Enforce principle of least privilege\nDesign: Backup copies of all configuration files\nImplementation: Integrity monitoring for configuration files\nImplementation: Enforce audit logging on code and configuration promotion procedures.\nImplementation: Load configuration from separate process and memory space, for example a separate physical device like a CD",
                    "summary": "Generally these are manually edited files that are not in the preview of the system administrators, any ability on the attackers' behalf to modify these files, for example in a CVS repository, gives unauthorized access directly to the application, the same as authorized users."
                },
                {
                    "id": "76",
                    "name": "Manipulating Input to File System Calls",
                    "prerequisites": "Program must allow for user controlled variables to be applied directly to the filesystem",
                    "related_weakness": [
                        "23",
                        "22",
                        "73",
                        "77",
                        "346",
                        "348",
                        "285",
                        "264",
                        "272",
                        "59",
                        "74",
                        "15",
                        "715"
                    ],
                    "solutions": "Design: Enforce principle of least privilege.\nDesign: Ensure all input is validated, and does not contain file system commands\nDesign: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.\nDesign: For interactive user applications, consider if direct file system interface is necessary, instead consider having the application proxy communication.\nImplementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.",
                    "summary": "An attacker manipulates inputs to the target software which the target software passes to file system calls in the OS. The goal is to gain access to, and perhaps modify, areas of the file system that the target software did not intend to be accessible."
                }
            ],
            "cvss": 4.0,
            "cvss-time": "2017-03-10T10:44:02.530000",
            "cwe": "CWE-77",
            "id": "CVE-2016-9337",
            "impact": {
                "availability": "PARTIAL",
                "confidentiality": "NONE",
                "integrity": "PARTIAL"
            },
            "references": [
                "http://www.securityfocus.com/bid/94697",
                "https://ics-cert.us-cert.gov/advisories/ICSA-16-341-01"
            ],
            "refmap": {
                "bid": [
                    "94697"
                ],
                "misc": [
                    "https://ics-cert.us-cert.gov/advisories/ICSA-16-341-01"
                ]
            },
            "summary": "An issue was discovered in Tesla Motors Model S automobile, all firmware versions before version 7.1 (2.36.31) with web browser functionality enabled. The vehicle's Gateway ECU is susceptible to commands that may allow an attacker to install malicious software allowing the attacker to send messages to the vehicle's CAN bus, a Command Injection.",
            "vulnerable_configuration": [
                {
                    "id": "cpe:2.3:o:tesla:gateway_ecu",
                    "title": "Tesla Gateway ECU"
                }
            ],
            "vulnerable_configuration_cpe_2_2": [
                "cpe:/o:tesla:gateway_ecu:-"
            ]
        }
    http_version: 
  recorded_at: Mon, 05 Aug 2019 17:04:35 GMT
recorded_with: VCR 5.0.0
